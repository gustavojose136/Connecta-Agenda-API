// <auto-generated />
using System;
using Connect_agenda_data.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Connect_agenda_data.Migrations
{
    [DbContext(typeof(ConnectAgendaContext))]
    [Migration("20240617022512_updateOrderdATA")]
    partial class updateOrderdATA
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Connect_agenda_models.Models.AddresModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Observation")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCreateId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.CompanyModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OnwerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCreateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OnwerId");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.LogsModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.OrderModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Discont")
                        .HasColumnType("double");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPlanCoop")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlanCardId")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<double?>("PricePlanCoop")
                        .HasColumnType("double");

                    b.Property<string>("ProfissionalServiceId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCreateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("paymentMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PlanCardId");

                    b.HasIndex("ProfissionalServiceId");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.PlanCardModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCreateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("PlanCard");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.PlansModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCreateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("PlansModel");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.ProfissionalServiceModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("Duration")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("ProfissionalId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCreateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProfissionalId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("ProfissionalService");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.RoleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCreateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.RoleUserCompanyModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserCreateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WorksDays")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserCompanyId");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("RoleUserCompany");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.ServiceModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCreateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.SpecialitsModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCreateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("Specialits");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.UserCompanyModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCreateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("UserCompany");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddresId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAdmin")
                        .IsRequired()
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Rg")
                        .HasColumnType("longtext");

                    b.Property<string>("SocialName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCreateId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AddresId");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.UserPlanCardModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IdPlanCard")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PlanCardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCreatedId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUpdateId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdPlanCard");

                    b.HasIndex("IdUser");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("UserPlanCard");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.AddresModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UserCreate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.CompanyModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.AddresModel", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "Onwer")
                        .WithMany()
                        .HasForeignKey("OnwerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Onwer");

                    b.Navigation("UserCreate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.LogsModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.OrderModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.UserModel", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.PlanCardModel", "PlanCard")
                        .WithMany()
                        .HasForeignKey("PlanCardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Connect_agenda_models.Models.ProfissionalServiceModel", "ProfissionalService")
                        .WithMany()
                        .HasForeignKey("ProfissionalServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Company");

                    b.Navigation("PlanCard");

                    b.Navigation("ProfissionalService");

                    b.Navigation("UserCreate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.PlanCardModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UserCreate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.PlansModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserCreate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.ProfissionalServiceModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.UserCompanyModel", "Profissional")
                        .WithMany()
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.ServiceModel", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profissional");

                    b.Navigation("Service");

                    b.Navigation("UserCreate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.RoleModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("UserCreate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.RoleUserCompanyModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.RoleModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserCompanyModel", "UserCompany")
                        .WithMany()
                        .HasForeignKey("UserCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserCompany");

                    b.Navigation("UserCreate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.ServiceModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("UserCreate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.SpecialitsModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserCreate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.UserCompanyModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");

                    b.Navigation("UserCreate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.UserModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.AddresModel", "Addres")
                        .WithMany()
                        .HasForeignKey("AddresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Addres");

                    b.Navigation("UserCreate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("Connect_agenda_models.Models.UserPlanCardModel", b =>
                {
                    b.HasOne("Connect_agenda_models.Models.PlanCardModel", "PlanCard")
                        .WithMany()
                        .HasForeignKey("IdPlanCard")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Connect_agenda_models.Models.UserModel", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PlanCard");

                    b.Navigation("User");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdate");
                });
#pragma warning restore 612, 618
        }
    }
}
